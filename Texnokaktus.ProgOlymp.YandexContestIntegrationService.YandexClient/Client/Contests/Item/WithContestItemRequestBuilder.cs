// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Clarifications;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Groups;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Messages;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participants;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participation;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Problems;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Standings;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.StandingsExtended;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Submissions;
using Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models;
namespace Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item
{
    /// <summary>
    /// Builds and executes requests for operations under \contests\{contestId}
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class WithContestItemRequestBuilder : BaseRequestBuilder
    {
        /// <summary>The clarifications property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Clarifications.ClarificationsRequestBuilder Clarifications
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Clarifications.ClarificationsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The groups property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Groups.GroupsRequestBuilder Groups
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Groups.GroupsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The messages property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Messages.MessagesRequestBuilder Messages
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Messages.MessagesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The participants property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participants.ParticipantsRequestBuilder Participants
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participants.ParticipantsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The participation property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participation.ParticipationRequestBuilder Participation
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Participation.ParticipationRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The problems property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Problems.ProblemsRequestBuilder Problems
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Problems.ProblemsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The standings property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Standings.StandingsRequestBuilder Standings
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Standings.StandingsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The standingsExtended property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.StandingsExtended.StandingsExtendedRequestBuilder StandingsExtended
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.StandingsExtended.StandingsExtendedRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The submissions property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Submissions.SubmissionsRequestBuilder Submissions
        {
            get => new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.Submissions.SubmissionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.WithContestItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithContestItemRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/contests/{contestId}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.WithContestItemRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public WithContestItemRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/contests/{contestId}", rawUrl)
        {
        }
        /// <summary>
        /// Required scope: &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;manage&lt;/code&gt;
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestDescription"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestDescription?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestDescription> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            return await RequestAdapter.SendAsync<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestDescription>(requestInfo, global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestDescription.CreateFromDiscriminatorValue, default, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Required scope: &lt;code&gt;submit&lt;/code&gt; or &lt;code&gt;manage&lt;/code&gt;
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.WithContestItemRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.WithContestItemRequestBuilder WithUrl(string rawUrl)
        {
            return new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Contests.Item.WithContestItemRequestBuilder(rawUrl, RequestAdapter);
        }
    }
}
#pragma warning restore CS0618
