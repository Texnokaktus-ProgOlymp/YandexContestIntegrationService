// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class ContestProblem : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The alias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Alias { get; set; }
#nullable restore
#else
        public string Alias { get; set; }
#endif
        /// <summary>The compilers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? Compilers { get; set; }
#nullable restore
#else
        public List<string> Compilers { get; set; }
#endif
        /// <summary>The id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The limits property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.CompilerLimit>? Limits { get; set; }
#nullable restore
#else
        public List<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.CompilerLimit> Limits { get; set; }
#endif
        /// <summary>The name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Name { get; set; }
#nullable restore
#else
        public string Name { get; set; }
#endif
        /// <summary>The problemType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProblemType { get; set; }
#nullable restore
#else
        public string ProblemType { get; set; }
#endif
        /// <summary>The statements property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Statement>? Statements { get; set; }
#nullable restore
#else
        public List<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Statement> Statements { get; set; }
#endif
        /// <summary>The testCount property</summary>
        public int? TestCount { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestProblem"/> and sets the default values.
        /// </summary>
        public ContestProblem()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestProblem"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestProblem CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.ContestProblem();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "alias", n => { Alias = n.GetStringValue(); } },
                { "compilers", n => { Compilers = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "limits", n => { Limits = n.GetCollectionOfObjectValues<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.CompilerLimit>(global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.CompilerLimit.CreateFromDiscriminatorValue)?.AsList(); } },
                { "name", n => { Name = n.GetStringValue(); } },
                { "problemType", n => { ProblemType = n.GetStringValue(); } },
                { "statements", n => { Statements = n.GetCollectionOfObjectValues<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Statement>(global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Statement.CreateFromDiscriminatorValue)?.AsList(); } },
                { "testCount", n => { TestCount = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("alias", Alias);
            writer.WriteCollectionOfPrimitiveValues<string>("compilers", Compilers);
            writer.WriteStringValue("id", Id);
            writer.WriteCollectionOfObjectValues<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.CompilerLimit>("limits", Limits);
            writer.WriteStringValue("name", Name);
            writer.WriteStringValue("problemType", ProblemType);
            writer.WriteCollectionOfObjectValues<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Statement>("statements", Statements);
            writer.WriteIntValue("testCount", TestCount);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
