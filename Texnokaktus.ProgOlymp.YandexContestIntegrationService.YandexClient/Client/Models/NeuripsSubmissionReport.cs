// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class NeuripsSubmissionReport : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The compiler property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Compiler { get; set; }
#nullable restore
#else
        public string Compiler { get; set; }
#endif
        /// <summary>The contestId property</summary>
        public long? ContestId { get; set; }
        /// <summary>The createAt property</summary>
        public DateTimeOffset? CreateAt { get; set; }
        /// <summary>The meta property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Meta { get; set; }
#nullable restore
#else
        public string Meta { get; set; }
#endif
        /// <summary>The participantName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ParticipantName { get; set; }
#nullable restore
#else
        public string ParticipantName { get; set; }
#endif
        /// <summary>The problemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProblemId { get; set; }
#nullable restore
#else
        public string ProblemId { get; set; }
#endif
        /// <summary>The rank property</summary>
        public int? Rank { get; set; }
        /// <summary>The result property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionResult? Result { get; set; }
#nullable restore
#else
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionResult Result { get; set; }
#endif
        /// <summary>The runId property</summary>
        public long? RunId { get; set; }
        /// <summary>The status property</summary>
        public global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport_status? Status { get; set; }
        /// <summary>The timeFromStartMillis property</summary>
        public long? TimeFromStartMillis { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport"/> and sets the default values.
        /// </summary>
        public NeuripsSubmissionReport()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "compiler", n => { Compiler = n.GetStringValue(); } },
                { "contestId", n => { ContestId = n.GetLongValue(); } },
                { "createAt", n => { CreateAt = n.GetDateTimeOffsetValue(); } },
                { "meta", n => { Meta = n.GetStringValue(); } },
                { "participantName", n => { ParticipantName = n.GetStringValue(); } },
                { "problemId", n => { ProblemId = n.GetStringValue(); } },
                { "rank", n => { Rank = n.GetIntValue(); } },
                { "result", n => { Result = n.GetObjectValue<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionResult>(global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionResult.CreateFromDiscriminatorValue); } },
                { "runId", n => { RunId = n.GetLongValue(); } },
                { "status", n => { Status = n.GetEnumValue<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport_status>(); } },
                { "timeFromStartMillis", n => { TimeFromStartMillis = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("compiler", Compiler);
            writer.WriteLongValue("contestId", ContestId);
            writer.WriteDateTimeOffsetValue("createAt", CreateAt);
            writer.WriteStringValue("meta", Meta);
            writer.WriteStringValue("participantName", ParticipantName);
            writer.WriteStringValue("problemId", ProblemId);
            writer.WriteIntValue("rank", Rank);
            writer.WriteObjectValue<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionResult>("result", Result);
            writer.WriteLongValue("runId", RunId);
            writer.WriteEnumValue<global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.NeuripsSubmissionReport_status>("status", Status);
            writer.WriteLongValue("timeFromStartMillis", TimeFromStartMillis);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
