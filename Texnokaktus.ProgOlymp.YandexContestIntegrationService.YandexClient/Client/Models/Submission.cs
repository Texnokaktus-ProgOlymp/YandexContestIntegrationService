// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class Submission : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The author property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Author { get; set; }
#nullable restore
#else
        public string Author { get; set; }
#endif
        /// <summary>The authorId property</summary>
        public long? AuthorId { get; set; }
        /// <summary>The compiler property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Compiler { get; set; }
#nullable restore
#else
        public string Compiler { get; set; }
#endif
        /// <summary>The id property</summary>
        public long? Id { get; set; }
        /// <summary>The memory property</summary>
        public long? Memory { get; set; }
        /// <summary>The problemAlias property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProblemAlias { get; set; }
#nullable restore
#else
        public string ProblemAlias { get; set; }
#endif
        /// <summary>The problemId property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProblemId { get; set; }
#nullable restore
#else
        public string ProblemId { get; set; }
#endif
        /// <summary>The score property</summary>
        public double? Score { get; set; }
        /// <summary>The submissionTime property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SubmissionTime { get; set; }
#nullable restore
#else
        public string SubmissionTime { get; set; }
#endif
        /// <summary>The test property</summary>
        public int? Test { get; set; }
        /// <summary>The time property</summary>
        public long? Time { get; set; }
        /// <summary>Time of submission, in milliseconds from participant start time</summary>
        public long? TimeFromStart { get; set; }
        /// <summary>The verdict property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Verdict { get; set; }
#nullable restore
#else
        public string Verdict { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Submission"/> and sets the default values.
        /// </summary>
        public Submission()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Submission"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Submission CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.Submission();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "author", n => { Author = n.GetStringValue(); } },
                { "authorId", n => { AuthorId = n.GetLongValue(); } },
                { "compiler", n => { Compiler = n.GetStringValue(); } },
                { "id", n => { Id = n.GetLongValue(); } },
                { "memory", n => { Memory = n.GetLongValue(); } },
                { "problemAlias", n => { ProblemAlias = n.GetStringValue(); } },
                { "problemId", n => { ProblemId = n.GetStringValue(); } },
                { "score", n => { Score = n.GetDoubleValue(); } },
                { "submissionTime", n => { SubmissionTime = n.GetStringValue(); } },
                { "test", n => { Test = n.GetIntValue(); } },
                { "time", n => { Time = n.GetLongValue(); } },
                { "timeFromStart", n => { TimeFromStart = n.GetLongValue(); } },
                { "verdict", n => { Verdict = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("author", Author);
            writer.WriteLongValue("authorId", AuthorId);
            writer.WriteStringValue("compiler", Compiler);
            writer.WriteLongValue("id", Id);
            writer.WriteLongValue("memory", Memory);
            writer.WriteStringValue("problemAlias", ProblemAlias);
            writer.WriteStringValue("problemId", ProblemId);
            writer.WriteDoubleValue("score", Score);
            writer.WriteStringValue("submissionTime", SubmissionTime);
            writer.WriteIntValue("test", Test);
            writer.WriteLongValue("time", Time);
            writer.WriteLongValue("timeFromStart", TimeFromStart);
            writer.WriteStringValue("verdict", Verdict);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
