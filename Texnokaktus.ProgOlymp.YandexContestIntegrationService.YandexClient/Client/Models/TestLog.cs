// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class TestLog : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The answer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Answer { get; set; }
#nullable restore
#else
        public string Answer { get; set; }
#endif
        /// <summary>The checkerError property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CheckerError { get; set; }
#nullable restore
#else
        public string CheckerError { get; set; }
#endif
        /// <summary>The error property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Error { get; set; }
#nullable restore
#else
        public string Error { get; set; }
#endif
        /// <summary>The input property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Input { get; set; }
#nullable restore
#else
        public string Input { get; set; }
#endif
        /// <summary>The isSample property</summary>
        public bool? IsSample { get; set; }
        /// <summary>The memoryUsed property</summary>
        public long? MemoryUsed { get; set; }
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The output property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Output { get; set; }
#nullable restore
#else
        public string Output { get; set; }
#endif
        /// <summary>The runningTime property</summary>
        public long? RunningTime { get; set; }
        /// <summary>The sequenceNumber property</summary>
        public int? SequenceNumber { get; set; }
        /// <summary>The testName property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TestName { get; set; }
#nullable restore
#else
        public string TestName { get; set; }
#endif
        /// <summary>The testsetIdx property</summary>
        public int? TestsetIdx { get; set; }
        /// <summary>The verdict property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Verdict { get; set; }
#nullable restore
#else
        public string Verdict { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.TestLog"/> and sets the default values.
        /// </summary>
        public TestLog()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.TestLog"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.TestLog CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Texnokaktus.ProgOlymp.YandexContestIntegrationService.Client.Models.TestLog();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "answer", n => { Answer = n.GetStringValue(); } },
                { "checkerError", n => { CheckerError = n.GetStringValue(); } },
                { "error", n => { Error = n.GetStringValue(); } },
                { "input", n => { Input = n.GetStringValue(); } },
                { "isSample", n => { IsSample = n.GetBoolValue(); } },
                { "memoryUsed", n => { MemoryUsed = n.GetLongValue(); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "output", n => { Output = n.GetStringValue(); } },
                { "runningTime", n => { RunningTime = n.GetLongValue(); } },
                { "sequenceNumber", n => { SequenceNumber = n.GetIntValue(); } },
                { "testName", n => { TestName = n.GetStringValue(); } },
                { "testsetIdx", n => { TestsetIdx = n.GetIntValue(); } },
                { "verdict", n => { Verdict = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("answer", Answer);
            writer.WriteStringValue("checkerError", CheckerError);
            writer.WriteStringValue("error", Error);
            writer.WriteStringValue("input", Input);
            writer.WriteBoolValue("isSample", IsSample);
            writer.WriteLongValue("memoryUsed", MemoryUsed);
            writer.WriteStringValue("message", Message);
            writer.WriteStringValue("output", Output);
            writer.WriteLongValue("runningTime", RunningTime);
            writer.WriteIntValue("sequenceNumber", SequenceNumber);
            writer.WriteStringValue("testName", TestName);
            writer.WriteIntValue("testsetIdx", TestsetIdx);
            writer.WriteStringValue("verdict", Verdict);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
